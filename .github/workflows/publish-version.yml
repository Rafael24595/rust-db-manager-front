name: Publish Version

on:
  push:
    branches: [ "main" ]

jobs:

  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build app
      run: npm run build --if-present

  publish_branch:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Extract project version
      id: package_version
      run: |
        PROJECT_VERSION=$(node -p "require('./package.json').version")
        echo "Version extracted: $PROJECT_VERSION"
        echo "PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV

    - name: Check if branch already exists
      id: check_branch
      run: |
        if git ls-remote --exit-code --heads https://@github.com/${{ github.repository }}.git "$PROJECT_VERSION"; then
          echo "Branch $PROJECT_VERSION already exists. Failing job."
          exit 1
        fi
      env:
        PROJECT_VERSION: ${{ env.PROJECT_VERSION }}

    - name: Create and push new branch
      env:
        GITHUB_TOKEN: ${{ secrets.RUSTDB_TOKEN }}
        PROJECT_VERSION: ${{ env.PROJECT_VERSION }}
      run: |        
        # Configure Git
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        # Create and push new branch
        git checkout -b "$PROJECT_VERSION"
        git remote set-url origin https://x-access-token:"$GITHUB_TOKEN"@github.com/${{ github.repository }}.git
        git push origin "$PROJECT_VERSION"

  push_image:
    needs: publish_branch
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Extract project version
      id: package_version
      run: |
        PROJECT_VERSION=$(node -p "require('./package.json').version")
        echo "Version extracted: $PROJECT_VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Check if Docker tag exists
      id: check_tag
      run: |
        REPO="${{ secrets.DOCKER_USER }}/rust-db-manager-front"
        echo "Tag PROJECT_VERSION ${PROJECT_VERSION}"
        TAG_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: JWT $(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${{ secrets.DOCKER_USER }}'", "password": "'${{ secrets.DOCKER_TOKEN }}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)" https://hub.docker.com/v2/repositories/${REPO}/tags/${PROJECT_VERSION})
        if [ $TAG_EXISTS -eq 200 ]; then
          echo "Tag ${PROJECT_VERSION} already exists. Exiting."
          exit 1
        fi

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USER }}/rust-db-manager-front:${{ env.VERSION }}
